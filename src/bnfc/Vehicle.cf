-- Grammar of Vehicle

comment "--";
comment "{-" "-}";

-- * Tokens

position token UIdent (upper (letter | digit | '_')*) ;
position token LIdent (lower (letter | digit | '_')*) ;

separator UIdent "";
separator LIdent "";


-- * Kinds

KApp.  Kind  ::= Kind Kind1;
KStar. Kind1 ::= "*";
KNat.  Kind1 ::= "Nat";
KList. Kind1 ::= "List";

coercions Kind 1;


-- * Types

TFun.    Type1 ::= Type "->" Type2;
TForall. Type1 ::= "forall" [LIdent] "." Type2;
TAdd.    Type2 ::= Type2 "+" Type3;
TApp.    Type3 ::= Type3 Type4;
TVar.    Type4 ::= LIdent;
TNil.    Type4 ::= "Nil";
TCons.   Type4 ::= "Cons";
TTensor. Type4 ::= "Tensor";
TBool.   Type4 ::= "Bool";
TReal.   Type4 ::= "Real";
TNat.    Type4 ::= "Nat";
TListOf. Type4 ::= "[" [Type] "]";

coercions Type 4;

separator Type ",";


-- * Expressions

-- NOTE:
--
--   The syntax for expressions used by the parser is more general than that
--   permitted by our bidirectional typing, which allows us to emit an more
--   specific error message when we're missing a type annotation, rather than
--   emitting a parse error.
--

layout "let";
layout stop "in";

EAnn.    Expr		::= Expr1 "::" Type;
ELet.    Expr1	::= "let" "{" [Decl] "}" "in" Expr1;
EIf.     Expr1	::= "if" Expr2 "then" Expr2 "else" Expr2;
ELam.    Expr2	::= "\\" [LIdent] "->" Expr2;
EImpl.   Expr3	::= Expr4 "=>" Expr3;
EAnd.    Expr4	::= Expr5 "&&" Expr4;
EOr.     Expr5	::= Expr6 "||" Expr5;
EEq.     Expr6	::= Expr7 "==" Expr6;
ELe.     Expr6	::= Expr7 "<=" Expr6;
ELt.     Expr6	::= Expr7 "<"  Expr6;
EGe.     Expr6	::= Expr7 ">=" Expr6;
EGt.     Expr6	::= Expr7 ">"  Expr6;
EMul.    Expr7	::= Expr7 "*"  Expr8;
EDiv.    Expr7	::= Expr7 "/"  Expr8;
EAdd.    Expr8	::= Expr8 "+"  Expr9;
ESub.    Expr8	::= Expr8 "-"  Expr9;
ENeg.    Expr9	::= "~" Expr9;
EApp.    Expr10 ::= Expr10 Expr11;
EVar.    Expr11 ::= LIdent;
ETensor. Expr11 ::= Tensor;
ETrue.   Expr11 ::= "True";
EFalse.  Expr11 ::= "False";

-- NOTE:
--
--   Type application and abstraction aren't part of the surface syntax, so
--   they're marked as 'internal'.
--

internal ETyApp. Expr ::= Expr Type;
internal ETyLam. Expr ::= "\\" [LIdent] "->" Expr;

coercions Expr 11;


-- * Tensors

ADouble. Tensor  ::= Double;
AList.   Tensor  ::= "[" [Tensor1] "]";
AExpr.   Tensor1 ::= Expr;

coercions Tensor 1;

separator Tensor1 ",";


-- * Declarations

layout toplevel;

DeclNetw. Decl ::= "network" LIdent ":" Type;
DeclType. Decl ::= LIdent ":" Type;
DeclExpr. Decl ::= LIdent [LIdent] "=" Expr;

separator nonempty Decl ";";
