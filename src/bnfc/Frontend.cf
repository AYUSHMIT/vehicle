-- Grammar of Vehicle

comment "--";
comment "{-" "-}";

-- * Tokens

-- NOTE: Token rules are tried IN ORDER, so the order matters!

position token TokArrow     {"->"};
position token TokHas       {"=>"};
position token TokForall    {"forall"};
position token TokIf        {"if"};
position token TokThen      {"then"};
position token TokElse      {"else"};
position token TokDot       {"."};
position token TokElemOf    {":"};
position token TokLambda    {"\\"};

position token TokTensor    {"Tensor"};
position token TokList      {"List"};
position token TokReal      {"Real"};
position token TokInt       {"Int"};
position token TokBool      {"Bool"};
position token TokProp      {"Prop"};

position token TokEvery     {"every"};
position token TokSome      {"some"};
position token TokImpl      {"implies"};
position token TokAnd       {"and"};
position token TokOr        {"or"};
position token TokNot       {"not"};
position token TokEq        {"=="};
position token TokNeq       {"!="};
position token TokLe        {"<="};
position token TokLt        {"<"};
position token TokGe        {">="};
position token TokGt        {">"};
position token TokMul       {"*"};
position token TokDiv       {"/"};
position token TokAdd       {"+"};
position token TokSub       {"-"};

position token TokSeqOpen   {"["};
position token TokSeqClose  {"]"};
position token TokCons      {"::"};
position token TokAt        {"!"};
position token TokMap       {"map"};
position token TokFold      {"fold"};

position token TokTrue      {"True"};
position token TokFalse     {"False"};

position token TokTCEq        {"HasEq"};
position token TokTCOrd       {"HasOrd"};
position token TokTCContainer {"IsContainer"};
position token TokTCTruth     {"IsTruth"};
position token TokTCQuantify  {"IsQuantify"};
position token TokTCNatural   {"IsNatural"};
position token TokTCIntegral  {"IsIntegral"};
position token TokTCRational  {"IsRational"};
position token TokTCReal      {"IsReal"};

position token Name        (letter (letter | digit | '_')*) ;
position token HoleToken   ({"?"} (letter | digit | '_')*);

separator Name "";


-- * Binders

ExplicitBinderUnann. Binder ::= Name;
ExplicitBinderAnn.   Binder ::= "(" Name TokElemOf Expr14 ")";
ImplicitBinderUnann. Binder ::= "{" Name "}";
ImplicitBinderAnn.   Binder ::= "{" Name TokElemOf Expr14 "}";

separator Binder "";

-- * Arguments

ExplicitArg. Arg ::= Expr14;
ImplicitArg. Arg ::= "{" Expr14 "}";

-- * Individual let declarations

LDecl. LetDecl ::= Binder "=" Expr;

separator LetDecl ",";

-- * Literals

LitInt.   Lit ::= Integer; -- NOTE: `Integer` parses natural numbers (not integers)
LitReal.  Lit ::= Double;
LitTrue.  Lit ::= TokTrue;
LitFalse. Lit ::= TokFalse;

-- * Type classes

TCEq.    TypeClass ::= TokTCEq        Expr14 Expr14;
TCOrd.   TypeClass ::= TokTCOrd       Expr14 Expr14;
TCCont.  TypeClass ::= TokTCContainer Expr14 Expr14;
TCTruth. TypeClass ::= TokTCTruth     Expr14;
TCQuant. TypeClass ::= TokTCQuantify  Expr14;
TCNat.   TypeClass ::= TokTCNatural   Expr14;
TCInt.   TypeClass ::= TokTCIntegral  Expr14;
TCRat.   TypeClass ::= TokTCRational  Expr14;
TCReal.  TypeClass ::= TokTCReal      Expr14;

-- * Expressions

-- NOTE:
--
--   The syntax for expressions used by the parser is more general than that
--   permitted by our bidirectional typing, which allows us to emit an more
--   specific error message when we're missing a type annotation, rather than
--   emitting a parse error.
--
--   See https://github.com/BNFC/bnfc/issues/372 for why tokens
--   aren't used for `let` and `in`.

-- Kinds.
Type.       Expr14 ::= "Type" Integer;

-- Core structure.
Forall.  Expr   ::= TokForall [Binder] TokDot Expr;
Ann.     Expr   ::= Expr1 TokElemOf Expr;
Let.     Expr1  ::= "let" "{" [LetDecl] "}" "in" Expr1;
Lam.     Expr2  ::= TokLambda [Binder] TokArrow Expr2;
App.     Expr12 ::= Expr12 Arg;
Fun.     Expr10 ::= Expr12 TokArrow Expr10;
Has.     Expr10 ::= Expr12 TokHas Expr10;
Var.     Expr14 ::= Name;
Literal. Expr14 ::= Lit;
TypeC.   Expr12 ::= TypeClass;
Hole.    Expr14 ::= HoleToken;

-- Primitive types.
List.    Expr13 ::= TokList Expr14;
Tensor.  Expr13 ::= TokTensor Expr14 Expr14;
Bool.    Expr14 ::= TokBool;
Prop.    Expr14 ::= TokProp;
Real.    Expr14 ::= TokReal;
Int.     Expr14 ::= TokInt;

-- Boolean expressions.
If.      Expr1  ::= TokIf Expr2 TokThen Expr2 TokElse Expr2;
Impl.    Expr4  ::= Expr5 TokImpl Expr4;
And.     Expr5  ::= Expr6 TokAnd Expr5;
Or.      Expr6  ::= Expr7 TokOr Expr6;
Eq.      Expr7  ::= Expr8 TokEq  Expr8;
Neq.     Expr7  ::= Expr8 TokNeq Expr8;
Not.     Expr10 ::= TokNot Expr10;

-- Numeric expressions.
Le.      Expr7  ::= Expr8 TokLe  Expr8;
Lt.      Expr7  ::= Expr8 TokLt  Expr8;
Ge.      Expr7  ::= Expr8 TokGe  Expr8;
Gt.      Expr7  ::= Expr8 TokGt  Expr8;
Mul.     Expr8  ::= Expr8 TokMul Expr9;
Div.     Expr8  ::= Expr8 TokDiv Expr9;
Add.     Expr9  ::= Expr9 TokAdd Expr10;
Sub.     Expr9  ::= Expr9 TokSub Expr10;
Neg.     Expr10 ::= TokSub Expr10;

-- Lists and tensors.
Seq.     Expr14 ::= TokSeqOpen [Expr] TokSeqClose;
Cons.    Expr3  ::= Expr4 TokCons Expr3;
At.      Expr11 ::= Expr11 TokAt Expr12;
Map.     Expr11 ::= TokMap Expr12 Expr13;
Fold.    Expr11 ::= TokFold Expr12 Expr13 Expr14;

-- Quantification
Every.     Expr3 ::= TokEvery Binder TokDot Expr4;
Some.      Expr3 ::= TokSome  Binder TokDot Expr4;
EveryIn.   Expr3 ::= TokEvery Binder "inn" Expr4 TokDot Expr4;
SomeIn.    Expr3 ::= TokSome  Binder "inn" Expr4 TokDot Expr4;

coercions Expr 14;
separator Expr ",";

layout "let";
layout stop "in";


-- * Declarations

DeclNetw.   Decl ::= "network" Name TokElemOf Expr;
DeclData.   Decl ::= "dataset" Name TokElemOf Expr;
DefType.    Decl ::= "type"    Name [Binder] "=" Expr;
DefFunType. Decl ::= Name TokElemOf Expr;
DefFunExpr. Decl ::= Name [Binder] "=" Expr;

separator Decl ";";


-- * Program

layout toplevel;

Main. Prog ::= [Decl]
