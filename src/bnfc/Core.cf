-- Grammar of Vehicle Core

comment "(*" "*)";

-- * Tokens

position token Builtin
  ( {"Type"} | {"Kind"} | {"Constraint"}
  | {"all"} | {"any"}
  | {"=>"} | {"and"} | {"or"} | {"not"}
  | {"=="} | {"!="} | {"<="} | {"<"} | {">="} | {">"}
  | {"*"} | {"/"} | {"+"} | {"-"} | {"~"}
  | {"Nat"} | {"Int"} | {"Real"}
  | {"Prop"} | {"Bool"}
  | {"Tensor"} | {"List"} | {"::"} | {"!"}
  | {"Eq"} | {"Ord"} | {"Container"} | {"Number"}
  );

position token Name (lower (letter | digit | '_')*) ;
position token Meta ('?' digit+) ;
position token Bool ({"True"} | {"False"}) ;

-- * Names for builtins, binders, and variables

ExplicitNameAndType. Binder ::= "(" Name Expr1 ")";
ExplicitName.        Binder ::= Name;
ImplicitNameAndType. Binder ::= "{" Name Expr1 "}";
ImplicitName.        Binder ::= "{" Name "}";

-- Core structure.

App.         Expr  ::= Expr Expr1;
Builtin.     Expr1 ::= Builtin;
Pi.          Expr  ::= "pi" Binder Expr1;
App.         Expr  ::= Expr Expr1;
Lam.         Expr  ::= "lambda" Binder Expr1;
Var.         Expr1 ::= Name;
Meta.        Expr  ::= Meta;
Let.         Expr  ::= "let" Binder Expr1 Expr1;
Seq.         Expr  ::= "[" [Expr] "]";
Ann.         Expr  ::= Expr ":type" Expr;
Literal.     Expr1 ::= Literal;

coercions Expr 1;

-- * Literals

LitNat.  Literal ::= Integer; -- NOTE: `Integer` parses natural numbers (not integers)
LitReal. Literal ::= Double;
LitBool. Literal ::= Bool;

-- * Declarations

DeclNetw. Decl ::= "(" "declare-network" Binder Type1 ")";
DeclData. Decl ::= "(" "declare-dataset" Binder Type1 ")";
DefFun.   Decl ::= "(" "define-fun"      Binder Type1 Expr1 ")";

separator Decl "";

-- * Program

Main. Prog ::= "(" [Decl] ")";

