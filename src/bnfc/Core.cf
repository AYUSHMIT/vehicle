-- Grammar of Vehicle Core

comment "(*" "*)";

-- * Tokens

position token BuiltinToken
  ( {"Constraint"}
  | {"every"} | {"some"}
  | {"=>"} | {"and"} | {"or"} | {"not"}
  | {"=="} | {"!="} | {"<="} | {"<"} | {">="} | {">"}
  | {"*"} | {"/"} | {"+"} | {"-"} | {"~"}
  | {"Nat"} | {"Int"} | {"Real"}
  | {"Prop"} | {"Bool"}
  | {"Tensor"} | {"List"} | {"::"} | {"!"}
  | {"Eq"} | {"Ord"} | {"Container"} | {"Truth"} | {"Quantify"}
  | {"Natural"} | {"Integral"} | {"Rational"} | {"Real"}
  );
position token NameToken (lower (letter | digit | '_')*) ;
position token BoolToken ({"True"} | {"False"}) ;
position token HoleToken ({"?"} (letter | digit | '_')*);
position token TypeToken ({"Type"} digit+);

-- * Binders

ExplicitNameAndType. Binder ::= "(" NameToken ":type" Expr ")";
ImplicitNameAndType. Binder ::= "{" NameToken ":type" Expr "}";
ExplicitName.        Binder ::= NameToken;
ImplicitName.        Binder ::= "{" NameToken "}";

-- * Function arguments

ExplicitArg. Arg ::= Expr1;
ImplicitArg. Arg ::= "{" Expr "}";

-- * Literals

LitNat.  Lit ::= Integer; -- NOTE: `Integer` parses natural numbers (not integers)
LitReal. Lit ::= Double;
LitBool. Lit ::= BoolToken;

-- * Core structure.

Ann.           Expr  ::= Expr1 ":type" Expr1;
Pi.            Expr ::= "pi" Binder Expr1;
Let.           Expr ::= "let" Binder Expr1 Expr1;
Lam.           Expr ::= "lambda" Binder Expr1;
App.           Expr ::= Expr1 Arg;
Type.          Expr1 ::= TypeToken;
Seq.           Expr1 ::= "[" [Expr1] "]";
Builtin.       Expr1 ::= BuiltinToken;
Var.           Expr1 ::= NameToken;
Literal.       Expr1 ::= Lit;
Hole.          Expr1 ::= HoleToken;

coercions Expr 1;
separator Expr1 "";

-- * Declarations

DeclNetw. Decl ::= "(" "declare-network" NameToken Expr1 ")";
DeclData. Decl ::= "(" "declare-dataset" NameToken Expr1 ")";
DefFun.   Decl ::= "(" "define-fun"      NameToken Expr1 Expr1 ")";

separator Decl "";

-- * Program

Main. Prog ::= "(" [Decl] ")";

