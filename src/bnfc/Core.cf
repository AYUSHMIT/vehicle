-- Grammar of Vehicle Core

comment "--";
comment "{-" "-}";

-- * Tokens

position token TokBuiltin
  ( {"all"} | {"any"}
	| {"=>"} | {"&&"} | {"||"}
	| {"=="} | {"!="} | {"<="} | {"<"} | {">="} | {">"}
	| {"*"} | {"/"} | {"+"} | {"-"} | {"~"} | {"!"}
	| {"Type"} | {"Tensor"} | {"Real"} | {"Nat"}
	| {"Bool"} | {"True"} | {"False"}
	| {"List"} | {"Nil"} | {"Cons"});

position token TokNat  (digit+);
position token TokReal (digit+ '.' digit+ ('e' '-'? digit+)?);
position token TokName (lower (letter | digit | '_')*) ;

-- * Kinds

KApp_. Kind_  ::= Kind_ Kind_1;
KCon_. Kind_1 ::= TokBuiltin;

coercions Kind_ 1;


-- * Types

TApp_.    Type_  ::= Type_ Type_1;
TForall_. Type_  ::= "forall" "(" TokName Kind_1 ")" Type_1;
TVar_.    Type_1 ::= TokName;
TCon_.    Type_1 ::= TokBuiltin;
TLitNat.  Type_1 ::= TokNat;

coercions Type_ 1;


-- * Expressions

EApp.     Expr_  ::= Expr_ Expr_1;
ELam.     Expr_  ::= "lambda" "(" TokName Type_ ")" Expr_1;
ETyApp.   Expr_  ::= Expr_ "{" Type_ "}";
ETyLam.   Expr_  ::= "lambda" "{" TokName Kind_ "}" Expr_1;
ELet.     Expr_  ::= "let" "(" TokName Type_ ")" Expr_1 Expr_1;
EAnn.     Expr_  ::= Expr_ ":type" Type_;
EVar.     Expr_1 ::= TokName;
ECon.     Expr_1 ::= TokBuiltin;
ELitNat.  Expr_1 ::= TokNat;
ELitReal. Expr_1 ::= TokReal;

coercions Expr_ 1;


-- * Declarations

DeclNetw_. Decl_ ::= "(" "declare-network" TokName Type_1 ")";
DeclExpr_. Decl_ ::= "(" "define-fun" TokName Type_1 Expr_1 ")";

separator nonempty Decl_ "";

-- * Program

Main. Prog_ ::= "(" [Decl_] ")";
