module Vehicle.Backend.Prelude where

import Data.Text.IO qualified as TIO
import Data.Bifunctor (Bifunctor(first))
import Data.Version (Version, makeVersion)

import Vehicle.Prelude
import Paths_vehicle qualified as VehiclePath

data OutputTarget
  = ITP ITP
  | Verifier Verifier

data ITP
  = Agda
  deriving (Show, Read)

data Verifier
  = VNNLib
  | Marabou
  deriving (Show, Read)

instance Pretty OutputTarget where
  pretty (ITP x)      = pretty $ show x
  pretty (Verifier x) = pretty $ show x

instance Show OutputTarget where
  show = \case
    ITP      arg -> show arg
    Verifier arg -> show arg

instance Read OutputTarget where
  readsPrec d x =
    case readsPrec d x of
      [] -> case readsPrec d x of
        []  -> []
        res -> fmap (first Verifier) res
      res -> fmap (first ITP) res

commentTokenOf :: OutputTarget -> Maybe (Doc a)
commentTokenOf = \case
  Verifier Marabou       -> Nothing
  Verifier VNNLib        -> Just ";"
  ITP Agda               -> Just "--"

versionOf :: OutputTarget -> Maybe Version
versionOf target = case target of
  Verifier VNNLib        -> Nothing
  Verifier Marabou       -> Nothing
  ITP Agda               -> Just $ makeVersion [2,6,2]

-- |Generate the file header given the token used to start comments in the
-- target language
makefileHeader :: OutputTarget -> Doc a
makefileHeader target = case commentTokenOf target of
  Nothing           -> ""
  Just commentToken -> vsep $ map (commentToken <+>)
    [ "WARNING: This file was generated automatically by Vehicle"
    , "and should not be modified manually!"
    , "Metadata"
    , " -" <+> pretty (show target) <> " version:" <+> targetVersion
    , " - AISEC version:" <+> pretty VehiclePath.version
    , " - Time generated: ???"
    ]
  where targetVersion = maybe "N/A" pretty (versionOf target)

writeResultToFile :: OutputTarget -> Maybe FilePath -> Doc a -> IO ()
writeResultToFile target filepath doc = do
  let fileHeader = makefileHeader target
  let text = layoutAsText (fileHeader <> line <> line <> doc)
  case filepath of
    Nothing               -> TIO.putStrLn text
    (Just outputFilePath) -> TIO.writeFile outputFilePath text