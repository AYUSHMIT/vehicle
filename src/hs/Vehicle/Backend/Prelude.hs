module Vehicle.Backend.Prelude where

import Data.Text (Text)
import Data.Text.IO qualified as TIO
import Data.Bifunctor (Bifunctor(first))
import Data.Version (Version, makeVersion)
import System.FilePath (takeDirectory)
import System.Directory (createDirectoryIfMissing)

import Vehicle.Prelude
import Paths_vehicle qualified as VehiclePath

data Backend
  = ITP ITP
  | Verifier Verifier
  | LossFunction
  deriving (Eq)

data ITP
  = Agda
  deriving (Eq, Show, Read)

data Verifier
  = VNNLib
  | Marabou
  deriving (Eq, Show, Read)

magicVariablePrefixes :: Verifier -> (Text, Text)
magicVariablePrefixes VNNLib  = ("X_", "Y_")
magicVariablePrefixes Marabou = ("x", "y")

pattern AgdaBackend :: Backend
pattern AgdaBackend = ITP Agda

pattern MarabouBackend :: Backend
pattern MarabouBackend = Verifier Marabou

pattern VNNLibBackend :: Backend
pattern VNNLibBackend = Verifier VNNLib

instance Pretty Backend where
  pretty (ITP x)      = pretty $ show x
  pretty (Verifier x) = pretty $ show x
  pretty LossFunction = "LossFunction"

instance Show Backend where
  show = \case
    ITP      arg -> show arg
    Verifier arg -> show arg
    LossFunction -> "LossFunction"

instance Read Backend where
  readsPrec d x =
    case readsPrec d x of
      [] -> case readsPrec d x of
        []  -> []
        res -> fmap (first Verifier) res
      res -> fmap (first ITP) res

commentTokenOf :: Backend -> Maybe (Doc a)
commentTokenOf = \case
  Verifier Marabou -> Nothing
  Verifier VNNLib  -> Just ";"
  ITP Agda         -> Just "--"
  LossFunction     -> Nothing

versionOf :: Backend -> Maybe Version
versionOf target = case target of
  Verifier Marabou -> Nothing
  Verifier VNNLib  -> Nothing
  ITP Agda         -> Just $ makeVersion [2,6,2]
  LossFunction     -> Nothing

-- |Generate the file header given the token used to start comments in the
-- target language
prependfileHeader :: Doc a -> Backend -> Doc a
prependfileHeader doc target = case commentTokenOf target of
  Nothing           -> doc
  Just commentToken -> vsep (map (commentToken <+>)
    [ "WARNING: This file was generated automatically by Vehicle"
    , "and should not be modified manually!"
    , "Metadata"
    , " -" <+> pretty (show target) <> " version:" <+> targetVersion
    , " - AISEC version:" <+> pretty VehiclePath.version
    , " - Time generated: ???"
    ]) <> line <> line <> doc
  where targetVersion = maybe "N/A" pretty (versionOf target)

writeResultToFile :: Backend -> Maybe FilePath -> Doc a -> IO ()
writeResultToFile target filepath doc = do
  let text = layoutAsText $ prependfileHeader doc target
  case filepath of
    Nothing             -> TIO.putStrLn text
    Just outputFilePath -> do
      createDirectoryIfMissing True (takeDirectory outputFilePath)
      TIO.writeFile outputFilePath text