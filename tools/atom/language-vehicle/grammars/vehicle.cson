name: 'Vehicle'
scopeName: 'source.vehicle'
fileTypes: ['vcl']
patterns: [
  {
    name: 'comment.block'
    begin: '\\{-'
    end: '-\\}'
    comment: 'Block comment'
  }
  {
    name: 'comment.line.double-dash'
    match: '(--).*$\n?'
    comment: 'Line comment'
  }
  {
    match: '^(network)\\s+([a-z][a-zA-Z_0-9]*)\\b'
    captures:
      1:
        name: 'keyword.vehicle'
      2:
        name: 'entity.name.function'
  }
  {
    name: 'keyword.vehicle'
    match: '^(network)\\b'
  }
  {
    name: 'entity.name.function'
    match: '^([a-z][a-zA-Z_0-9]*)\\b'
  }
  {
    name: 'keyword.vehicle'
    match: '\\b(forall|exists)\\b'
  }
  {
    name: 'keyword.control.vehicle'
    match: '\\b(if|then|else|let|in)\\b'
  }
  {
    name: 'keyword.operator.vehicle'
    match: "[|&!%$?~+:\\-.=</>\\\\*]+"
  }
  {
    name: 'constant.numeric.vehicle'
    match: '\\b([0-9]+(\\.[0-9]+)?(e-?[0-9]+)?)\\b'
  }
  {
    name: 'constant.language.vehicle'
    match: '\\b(True|False)\\b'
  }
  {
    name: 'storage.type.vehicle'
    match: '\\b(Bool|Real|Nat|Tensor|List|Nil|Cons)\\b'
  }
  {
    name: 'variable.other.vehicle'
    match: '\\b([a-z][a-zA-Z_0-9]*)\\b'
  }
]
